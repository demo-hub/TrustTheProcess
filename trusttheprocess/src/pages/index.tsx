import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import styles from "./index.module.css";

import router from "next/router";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const roomMutation = trpc.room.createRoom.useMutation();

  const createRoom = async () => {
    // Create a public room with trpc
    const room = await roomMutation.mutateAsync({
      name: "My new room",
    });

    // Redirect to the room
    router.push(`/room/${room.id}`);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1 className={styles.title}>
            Trust The <span className={styles.pinkSpan}>Process</span>
          </h1>
          <div className={styles.cardRow} onClick={() => createRoom()}>
            <div className={styles.card}>
              <h3 className={styles.cardTitle}>Create new room â†’</h3>
              <div className={styles.cardText}>Create a new public room</div>
            </div>
          </div>
          <div className={styles.showcaseContainer}>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className={styles.authContainer}>
      <p className={styles.showcaseText}>
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className={styles.loginButton}
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
